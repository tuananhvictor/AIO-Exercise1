# -*- coding: utf-8 -*-
"""cau4module2week2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H5P8k3xPqRv19sgbOvBjJCiW3lq2YDDM
"""

import numpy as np
import cv2
from google.colab.patches import cv2_imshow

def compute_cosine_similarity(v1, v2):
    dot_product = np.sum(v1 * v2)
    norm_v1 = np.linalg.norm(v1)
    norm_v2 = np.linalg.norm(v2)
    return dot_product / (norm_v1 * norm_v2)

def compute_difference(bg_img, input_img):
    # Convert images to float32 for better precision
    bg_float = bg_img.astype(np.float32)
    input_float = input_img.astype(np.float32)

    # Compute cosine similarity for each pixel
    height, width, _ = bg_img.shape
    difference_single_channel = np.zeros((height, width), dtype=np.float32)

    for i in range(height):
        for j in range(width):
            similarity = compute_cosine_similarity(bg_float[i,j], input_float[i,j])
            difference_single_channel[i,j] = 1 - similarity  # Convert similarity to difference

    # Normalize to 0-255 range
    difference_single_channel = (difference_single_channel * 255).astype(np.uint8)

    return difference_single_channel

def compute_binary_mask(difference_single_channel):
    # Apply thresholding to create binary mask
    _, difference_binary = cv2.threshold(difference_single_channel, 30, 255, cv2.THRESH_BINARY)

    return difference_binary

def replace_background(bg1_image, bg2_image, ob_image):
    difference_single_channel = compute_difference(bg1_image, ob_image)

    binary_mask = compute_binary_mask(difference_single_channel)

    # Expand dimensions of binary_mask to match the input images
    binary_mask_3d = np.repeat(binary_mask[:, :, np.newaxis], 3, axis=2)

    # Use the mask to combine the object and new background
    output = np.where(binary_mask_3d == 255, ob_image, bg2_image)

    return output

# Load and resize images
bg1_image = cv2.imread('GreenBackground.png', 1)
bg1_image = cv2.resize(bg1_image, (678, 381))

ob_image = cv2.imread('Object.png', 1)
ob_image = cv2.resize(ob_image, (678, 381))

bg2_image = cv2.imread('NewBackground.jpg', 1)
bg2_image = cv2.resize(bg2_image, (678, 381))

# Compute and display difference
difference_single_channel = compute_difference(bg1_image, ob_image)
cv2_imshow(difference_single_channel)

# Compute and display binary mask
binary_mask = compute_binary_mask(difference_single_channel)
cv2_imshow(binary_mask)

# Replace background and display result
result = replace_background(bg1_image, bg2_image, ob_image)
cv2_imshow(result)