# -*- coding: utf-8 -*-
"""levenshtein_distance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1desLF1bSBj9MGeqKQ66fSnIZGBChvxg7
"""

def levenshtein_distance(str1, str2):
  """Calculates the Levenshtein distance between two strings.

  Args:
      str1: The first string.
      str2: The second string.

  Returns:
      The Levenshtein distance between the two strings.
  """

  m = len(str1) + 1  # Length of the first string + 1 (for empty string)
  n = len(str2) + 1  # Length of the second string + 1 (for empty string)

  # Create a matrix to store edit distances
  d = [[0 for _ in range(n)] for _ in range(m)]

  # Initialize base cases (empty strings)
  for i in range(m):
    d[i][0] = i  # Inserting all characters of str1

  for j in range(n):
    d[0][j] = j  # Deleting all characters of str1

  # Fill the remaining cells using the Levenshtein distance formula
  for i in range(1, m):
    for j in range(1, n):
      if str1[i - 1] == str2[j - 1]:
        cost = 0  # No edit needed if characters are the same
      else:
        cost = 1  # Cost of substitution

      d[i][j] = min(
          d[i - 1][j] + 1,  # Insertion
          d[i][j - 1] + 1,  # Deletion
          d[i - 1][j - 1] + cost  # Substitution
      )

  return d[m - 1][n - 1]  # Levenshtein distance at the bottom right corner

# Example usagea
str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")
distance = levenshtein_distance(str1, str2)
print(f"Levenshtein distance between '{str1}' and '{str2}': {distance}")